
 ViewResolver
 
   ㄴ Controller 에서 전달받은 
      View 의 이름(Controller 클래스의 메소드의 return 값)을 기반으로
      jsp 파일을 찾아서 선택하고 jsp 데이터를 분석해서
      응답결과를 만들어서 전달함
      
      ViewResolver 가 사용하는 View 의 이름을 지정하는 방법
      jsp 를 통해서 응답결과를 만들 때 필요한 data 를 전달하는 방법
      
 
 HttpServletRequest
   
  ㄴ Spring MVC 가 jsp 를 처리할 때
     HttpServletRequest 객체를 (자동으로 생성해서) jsp 로 전달함
  ㄴ ViewResolver 는 이것을 이용해서 jsp 작업시 data 를 사용함   
  
  
  
  1) 웹브라우저 주소표시줄에 /test1 이 표시되면 <- 요청정보: request
  2) DispatcherServlet 이 요청정보를 받아서 분석해서 Controller 를 선택함
  3) @GetMapping("/test1") 이 있는 메소드를 호출함
  4) 이 메소드의 return 값으로 지정된 이름의 jsp 파일(View)을 선택함
  5) 이 정보를 ViewResolver 가 받아서 해당 jsp 파일을 분석함
  6) 해당 jsp 파일에 있는 java code 나, EL, JSTL 등을 모두 실행시킴
  7) 이 결과를 다시 DispatcherServlet 으로 전달함
  8) 여기서 생성된 정보(html) 를 Client 로 보내면: response
  9) Client 의 web browser 가 이를 rendering 해서 화면으로 보여줌
  
 
 HttpServletRequest 객체를 주입받는 방법
   ㄴ public String test2(HttpServletRequest request)
      request.setAttribute("변수", 값) 
 
 
 Model 객체를 주입받는 방법
   ㄴ public String test3(Model model) 
      ㄴ Model 객체를 주입 받으면 HttpServletRequest 객체에 담아져서 jsp 에 전달할 수 있음  
      ㄴ model.addAttribute("변수", 값) 
  
  
 ModelAndView 객체를 주입받는 방법
   ㄴ public String test3(ModelAndView mv)  
      ㄴ ModelAndView 는 Model 에 값을 설정하고, View 의 이름을 지정까지 할 수 있음
         test3 메소드는 View 의 이름을 return 하지 않고 ModelAndView 객체를 return 함
         ㄴ mv.addObject("변수", 값)
            mv.setViewName("View 이름")


 ViewResolver 에 의해서 jsp 가 실행되고 응답결과가 만들어짐
 Controller 에서 View 를 지정할 때
 ViewResolver 가 사용할 data 를 Request 영역에 저장함
                                 
 Request 영역에 저장한 data 를 jsp 에서 꺼내서 사용할 때
 ${requestScope.number1} 이라는 EL 을 사용함
 
 
 
 
 
 
 
 

             